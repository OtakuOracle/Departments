// <auto-generated />
using System;
using Departments.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Departments.Migrations
{
    [DbContext(typeof(User7Context))]
    [Migration("20250625105450_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence("employee_employeeid_seq", "calend");

            modelBuilder.Entity("Departments.Models.Department", b =>
                {
                    b.Property<int>("Departmentid")
                        .HasColumnType("integer")
                        .HasColumnName("departmentid");

                    b.Property<string>("Departmentname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("departmentname");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.HasKey("Departmentid")
                        .HasName("department_pkey");

                    b.ToTable("department", "calend");
                });

            modelBuilder.Entity("Departments.Models.DepartmentSubdivision", b =>
                {
                    b.Property<int>("Subdivisionid")
                        .HasColumnType("integer")
                        .HasColumnName("subdivisionid");

                    b.Property<int>("Departmentid")
                        .HasColumnType("integer")
                        .HasColumnName("departmentid");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int?>("Headpositionid")
                        .HasColumnType("integer")
                        .HasColumnName("headpositionid");

                    b.Property<string>("Subdivisionname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("subdivisionname");

                    b.HasKey("Subdivisionid")
                        .HasName("department_subdivision_pkey");

                    b.HasIndex("Departmentid");

                    b.HasIndex("Headpositionid");

                    b.ToTable("department_subdivision", "calend");
                });

            modelBuilder.Entity("Departments.Models.Employee", b =>
                {
                    b.Property<int>("Employeeid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("employeeid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Employeeid"));

                    b.Property<DateOnly?>("Birthdate")
                        .HasColumnType("date")
                        .HasColumnName("birthdate");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("firstname");

                    b.Property<bool?>("IsManager")
                        .HasColumnType("boolean")
                        .HasColumnName("is_manager");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("lastname");

                    b.Property<string>("Middlename")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("middlename");

                    b.Property<string>("Mobiletel")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("mobiletel");

                    b.Property<string>("Office")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("office");

                    b.Property<string>("Personalnumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("personalnumber");

                    b.Property<int>("Positionid")
                        .HasColumnType("integer")
                        .HasColumnName("positionid");

                    b.Property<int?>("Subdivisionid")
                        .HasColumnType("integer")
                        .HasColumnName("subdivisionid");

                    b.Property<string>("Worktel")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("worktel");

                    b.HasKey("Employeeid")
                        .HasName("employee_pkey");

                    b.HasIndex("Positionid");

                    b.HasIndex("Subdivisionid");

                    b.ToTable("employee", "calend");
                });

            modelBuilder.Entity("Departments.Models.EmployeeRelation", b =>
                {
                    b.Property<int>("Relationid")
                        .HasColumnType("integer")
                        .HasColumnName("relationid");

                    b.Property<int?>("Assistantid")
                        .HasColumnType("integer")
                        .HasColumnName("assistantid");

                    b.Property<int?>("Employeeid")
                        .HasColumnType("integer")
                        .HasColumnName("employeeid");

                    b.Property<int?>("Managerid")
                        .HasColumnType("integer")
                        .HasColumnName("managerid");

                    b.HasKey("Relationid")
                        .HasName("employee_relations_pkey");

                    b.HasIndex("Assistantid");

                    b.HasIndex("Employeeid");

                    b.HasIndex("Managerid");

                    b.ToTable("employee_relation", "calend");
                });

            modelBuilder.Entity("Departments.Models.Position", b =>
                {
                    b.Property<int>("Positionid")
                        .HasColumnType("integer")
                        .HasColumnName("positionid");

                    b.Property<bool?>("Ismanager")
                        .HasColumnType("boolean")
                        .HasColumnName("ismanager");

                    b.Property<string>("Positionname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("positionname");

                    b.HasKey("Positionid")
                        .HasName("position_pkey");

                    b.ToTable("position", "calend");
                });

            modelBuilder.Entity("Departments.Models.DepartmentSubdivision", b =>
                {
                    b.HasOne("Departments.Models.Department", "Department")
                        .WithMany("DepartmentSubdivisions")
                        .HasForeignKey("Departmentid")
                        .IsRequired()
                        .HasConstraintName("department_subdivision_departmentid_fkey");

                    b.HasOne("Departments.Models.Position", "Headposition")
                        .WithMany("DepartmentSubdivisions")
                        .HasForeignKey("Headpositionid")
                        .HasConstraintName("fk_head_position");

                    b.Navigation("Department");

                    b.Navigation("Headposition");
                });

            modelBuilder.Entity("Departments.Models.Employee", b =>
                {
                    b.HasOne("Departments.Models.Position", "Position")
                        .WithMany("Employees")
                        .HasForeignKey("Positionid")
                        .IsRequired()
                        .HasConstraintName("fk_position_id");

                    b.HasOne("Departments.Models.DepartmentSubdivision", "Subdivision")
                        .WithMany("Employees")
                        .HasForeignKey("Subdivisionid")
                        .HasConstraintName("employee_subdivisionid_fkey");

                    b.Navigation("Position");

                    b.Navigation("Subdivision");
                });

            modelBuilder.Entity("Departments.Models.EmployeeRelation", b =>
                {
                    b.HasOne("Departments.Models.Employee", "Assistant")
                        .WithMany("EmployeeRelationAssistants")
                        .HasForeignKey("Assistantid")
                        .HasConstraintName("employee_relations_assistantid_fkey");

                    b.HasOne("Departments.Models.Employee", "Employee")
                        .WithMany("EmployeeRelationEmployees")
                        .HasForeignKey("Employeeid")
                        .HasConstraintName("employee_relations_employeeid_fkey");

                    b.HasOne("Departments.Models.Employee", "Manager")
                        .WithMany("EmployeeRelationManagers")
                        .HasForeignKey("Managerid")
                        .HasConstraintName("employee_relations_managerid_fkey");

                    b.Navigation("Assistant");

                    b.Navigation("Employee");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Departments.Models.Department", b =>
                {
                    b.Navigation("DepartmentSubdivisions");
                });

            modelBuilder.Entity("Departments.Models.DepartmentSubdivision", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Departments.Models.Employee", b =>
                {
                    b.Navigation("EmployeeRelationAssistants");

                    b.Navigation("EmployeeRelationEmployees");

                    b.Navigation("EmployeeRelationManagers");
                });

            modelBuilder.Entity("Departments.Models.Position", b =>
                {
                    b.Navigation("DepartmentSubdivisions");

                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
